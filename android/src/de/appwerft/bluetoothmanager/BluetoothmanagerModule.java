/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.bluetoothmanager;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;

import android.annotation.TargetApi;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothProfile;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.kroll.common.TiMessenger;

@Kroll.module(name = "Bluetoothmanager", id = "de.appwerft.bluetoothmanager", propertyAccessors = { "onsuccess",
		"onerror" })
public class BluetoothmanagerModule extends KrollModule {

	private Context ctx;
	boolean findDevicesRunning = false;
	boolean activityStopped = true;
	final static int REQUEST_CODE = 3667;

	BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
	@Kroll.constant
	final static int NOTAVAILABLE = 0;
	@Kroll.constant
	final static int DISABLED = 1;
	@Kroll.constant
	final static int ENABLED = 2;
	@Kroll.constant
	final static int DISABLED_AIRPLANE_MODE = 3;

	public static final String LCAT = "BTM";
	public KrollFunction onReady;

	private KrollFunction onSuccess;
	private KrollFunction onError;

	int type;
	Runnable cronJob;
	Handler handler = new Handler(Looper.getMainLooper());

	public BluetoothmanagerModule() {
		super();

	}

	@Kroll.method
	public void startMonitorPairedDevices(KrollDict opts) {
		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled())
			return;
		if (opts.containsKeyAndNotNull("type"))
			type = opts.getInt("type");

		if (opts.containsKeyAndNotNull("onchanged"))
			onReady = (KrollFunction) opts.get("onchanged");
		cronJob = new Runnable() {
			@Override
			public void run() {
				bluetoothAdapter.getProfileProxy(ctx, new BondedDevicesScanner(
						A2dpModule.this), BluetoothProfile.A2DP);
				handler.postDelayed(this, 12000);
			}
		};
		handler.post(cronJob);

		/*
		 * ctx.registerReceiver(MonitorBondedDevicesr, new IntentFilter(
		 * BluetoothDevice.ACTION_FOUND)); if (!btAdapter.isDiscovering()) {
		 * btAdapter.startDiscovery(); } else Log.w(LCAT,
		 * "was discovering, cannot start discovering");
		 */
	}

	@Kroll.method
	public void stopMonitorPairedDevices() {
		tearDown();
	}

	private void tearDown() {
		handler.removeCallbacks(cronJob);
		if (pairedDevices != null)
			PairedDevices.resetList();
		if (bluetoothAdapter != null && bluetoothAdapter.isDiscovering())
			bluetoothAdapter.cancelDiscovery();
	}

	@Kroll.method
	public boolean isAvailable() {
		return (bluetoothAdapter == null) ? false : true;
	}

	@Kroll.method
	public int getAvailability() {
		if (bluetoothAdapter == null)
			return NOTAVAILABLE;
		if  (bluetoothAdapter.isEnabled())
			return ENABLED;
		if (isAirplaneModeOn())
			return DISABLED_AIRPLANE_MODE;
		return DISABLED;
	}

	@Kroll.method
	public boolean isEnabled() {
		if (bluetoothAdapter == null) {
			return false;
		} else {
			return (bluetoothAdapter.isEnabled()) ? true : false;
		}
	}

	@Kroll.method
	public boolean enable(@Kroll.argument(optional = true) KrollDict opts) {
		importProps(opts);
		if (opts == null && onSuccess == null) { // simple start without callback
			return bluetoothAdapter.enable();
		} else {
			final Intent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			final TiActivitySupport activitySupport = (TiActivitySupport) TiApplication.getInstance()
					.getCurrentActivity();

			if (TiApplication.isUIThread()) {
				activitySupport.launchActivityForResult(intent, REQUEST_CODE, new BTEnablerResultHandler());
			} else {
				TiMessenger.postOnMain(new Runnable() {
					@Override
					public void run() {
						activitySupport.launchActivityForResult(intent, REQUEST_CODE, new BTEnablerResultHandler());
					}
				});
			}
			return true;
		}
	}

	@SuppressWarnings("deprecation")
	@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
	@Kroll.method
	public boolean isAirplaneModeOn() {
		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
			return Settings.System.getInt(ctx.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0) != 0;
		} else {
			return Settings.Global.getInt(ctx.getContentResolver(), Settings.Global.AIRPLANE_MODE_ON, 0) != 0;
		}
	}

	@Kroll.method
	public boolean hasPermissions() {
		return hasPermission("android.permission.ACCESS_COARSE_LOCATION")
				&& hasPermission("android.permission.BLUETOOTH")
				&& hasPermission("android.permission.android.permission.BLUETOOTH_ADMIN");
	}

	@Kroll.method
	public void disable() {
		BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if (bluetoothAdapter.isEnabled()) {
			bluetoothAdapter.disable();
		}
		return;
	}

	private final class BTEnablerResultHandler implements TiActivityResultHandler {

		@Override
		public void onError(Activity activity, int requestCode, Exception ex) {
			KrollDict event = new KrollDict();
			event.put("message", ex.getLocalizedMessage());
			if (onError != null)
				onError.callAsync(getKrollObject(), event);
			if (hasListeners("onerror")) {
				fireEvent("onerror", event);
			}
		}

		@Override
		public void onResult(Activity activity, int requestCode, int resultCode, Intent data) {
			if (requestCode == REQUEST_CODE) {
				KrollDict event = new KrollDict();
				event.put("result", resultCode);
				event.put("name", bluetoothAdapter.getName());
				event.put("address", bluetoothAdapter.getAddress());
				if (onSuccess != null)
					onSuccess.callAsync(getKrollObject(), event);
				if (hasListeners("onsuccess")) {
					fireEvent("onsuccess", event);
				}
			}
		}
	}

	

	private boolean hasPermission(String permission) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
			Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
			if (currentActivity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
				return false;
			}
		}
		return true;
	}

	private void importProps(KrollDict opts) {
		if (opts != null) {
			if (opts.containsKeyAndNotNull("onsuccess")) {
				if (opts.get("onsuccess") instanceof KrollFunction) {
					onSuccess = (KrollFunction) opts.get("onsuccess");
				}
			}
			if (opts.containsKeyAndNotNull("onerror")) {
				if (opts.get("onerror") instanceof KrollFunction) {
					onError = (KrollFunction) opts.get("onerror");
				}
			}
		}
		if (hasProperty("onsuccess")) {
			onSuccess = (KrollFunction) getProperty("onerror");
		}
		if (hasProperty("onerror")) {
			onError = (KrollFunction) getProperty("onerror");
		}
	}
}
